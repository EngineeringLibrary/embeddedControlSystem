/****************************************************************************
** Meta object code from reading C++ file 'tst_arxdoubletest.cpp'
**
** Created by: The Qt Meta Object Compiler version 67 (Qt 5.12.6)
**
** WARNING! All changes made in this file will be lost!
*****************************************************************************/

#include <QtCore/qbytearray.h>
#include <QtCore/qmetatype.h>
#if !defined(Q_MOC_OUTPUT_REVISION)
#error "The header file 'tst_arxdoubletest.cpp' doesn't include <QObject>."
#elif Q_MOC_OUTPUT_REVISION != 67
#error "This file was generated using the moc from 5.12.6. It"
#error "cannot be used with the include files from this version of Qt."
#error "(The moc has changed too much.)"
#endif

QT_BEGIN_MOC_NAMESPACE
QT_WARNING_PUSH
QT_WARNING_DISABLE_DEPRECATED
struct qt_meta_stringdata_ArxDoubleTest_t {
    QByteArrayData data[37];
    char stringdata0[694];
};
#define QT_MOC_LITERAL(idx, ofs, len) \
    Q_STATIC_BYTE_ARRAY_DATA_HEADER_INITIALIZER_WITH_OFFSET(len, \
    qptrdiff(offsetof(qt_meta_stringdata_ArxDoubleTest_t, stringdata0) + ofs \
        - idx * sizeof(QByteArrayData)) \
    )
static const qt_meta_stringdata_ArxDoubleTest_t qt_meta_stringdata_ArxDoubleTest = {
    {
QT_MOC_LITERAL(0, 0, 13), // "ArxDoubleTest"
QT_MOC_LITERAL(1, 14, 20), // "voidConstructorCase1"
QT_MOC_LITERAL(2, 35, 0), // ""
QT_MOC_LITERAL(3, 36, 20), // "voidConstructorCase2"
QT_MOC_LITERAL(4, 57, 20), // "voidConstructorCase3"
QT_MOC_LITERAL(5, 78, 20), // "voidConstructorCase4"
QT_MOC_LITERAL(6, 99, 20), // "voidConstructorCase5"
QT_MOC_LITERAL(7, 120, 20), // "voidConstructorCase6"
QT_MOC_LITERAL(8, 141, 15), // "copyConstructor"
QT_MOC_LITERAL(9, 157, 24), // "copyConstructorOtherType"
QT_MOC_LITERAL(10, 182, 14), // "copyAssignment"
QT_MOC_LITERAL(11, 197, 23), // "copyAssignmentOtherType"
QT_MOC_LITERAL(12, 221, 21), // "stringConversionCase2"
QT_MOC_LITERAL(13, 243, 21), // "stringConversionCase3"
QT_MOC_LITERAL(14, 265, 21), // "stringConversionCase4"
QT_MOC_LITERAL(15, 287, 21), // "stringConversionCase5"
QT_MOC_LITERAL(16, 309, 22), // "stringConversionCase12"
QT_MOC_LITERAL(17, 332, 22), // "stringConversionCase13"
QT_MOC_LITERAL(18, 355, 22), // "stringConversionCase14"
QT_MOC_LITERAL(19, 378, 22), // "stringConversionCase15"
QT_MOC_LITERAL(20, 401, 22), // "getNumberOfInputDelays"
QT_MOC_LITERAL(21, 424, 17), // "getNumberOfInputs"
QT_MOC_LITERAL(22, 442, 23), // "getNumberOfOutputDelays"
QT_MOC_LITERAL(23, 466, 18), // "getNumberOfOutputs"
QT_MOC_LITERAL(24, 485, 20), // "getNumberOfVariables"
QT_MOC_LITERAL(25, 506, 12), // "getMaxnInOut"
QT_MOC_LITERAL(26, 519, 10), // "getNSample"
QT_MOC_LITERAL(27, 530, 13), // "getSampleTime"
QT_MOC_LITERAL(28, 544, 17), // "getTimeSimulation"
QT_MOC_LITERAL(29, 562, 17), // "getTransportDelay"
QT_MOC_LITERAL(30, 580, 14), // "getInputMatrix"
QT_MOC_LITERAL(31, 595, 15), // "getOutputMatrix"
QT_MOC_LITERAL(32, 611, 12), // "getModelCoef"
QT_MOC_LITERAL(33, 624, 16), // "getLinearVectorA"
QT_MOC_LITERAL(34, 641, 24), // "getLinearEqualityVectorB"
QT_MOC_LITERAL(35, 666, 15), // "setLinearVector"
QT_MOC_LITERAL(36, 682, 11) // "simInMatrix"

    },
    "ArxDoubleTest\0voidConstructorCase1\0\0"
    "voidConstructorCase2\0voidConstructorCase3\0"
    "voidConstructorCase4\0voidConstructorCase5\0"
    "voidConstructorCase6\0copyConstructor\0"
    "copyConstructorOtherType\0copyAssignment\0"
    "copyAssignmentOtherType\0stringConversionCase2\0"
    "stringConversionCase3\0stringConversionCase4\0"
    "stringConversionCase5\0stringConversionCase12\0"
    "stringConversionCase13\0stringConversionCase14\0"
    "stringConversionCase15\0getNumberOfInputDelays\0"
    "getNumberOfInputs\0getNumberOfOutputDelays\0"
    "getNumberOfOutputs\0getNumberOfVariables\0"
    "getMaxnInOut\0getNSample\0getSampleTime\0"
    "getTimeSimulation\0getTransportDelay\0"
    "getInputMatrix\0getOutputMatrix\0"
    "getModelCoef\0getLinearVectorA\0"
    "getLinearEqualityVectorB\0setLinearVector\0"
    "simInMatrix"
};
#undef QT_MOC_LITERAL

static const uint qt_meta_data_ArxDoubleTest[] = {

 // content:
       8,       // revision
       0,       // classname
       0,    0, // classinfo
      35,   14, // methods
       0,    0, // properties
       0,    0, // enums/sets
       0,    0, // constructors
       0,       // flags
       0,       // signalCount

 // slots: name, argc, parameters, tag, flags
       1,    0,  189,    2, 0x08 /* Private */,
       3,    0,  190,    2, 0x08 /* Private */,
       4,    0,  191,    2, 0x08 /* Private */,
       5,    0,  192,    2, 0x08 /* Private */,
       6,    0,  193,    2, 0x08 /* Private */,
       7,    0,  194,    2, 0x08 /* Private */,
       8,    0,  195,    2, 0x08 /* Private */,
       9,    0,  196,    2, 0x08 /* Private */,
      10,    0,  197,    2, 0x08 /* Private */,
      11,    0,  198,    2, 0x08 /* Private */,
      12,    0,  199,    2, 0x08 /* Private */,
      13,    0,  200,    2, 0x08 /* Private */,
      14,    0,  201,    2, 0x08 /* Private */,
      15,    0,  202,    2, 0x08 /* Private */,
      16,    0,  203,    2, 0x08 /* Private */,
      17,    0,  204,    2, 0x08 /* Private */,
      18,    0,  205,    2, 0x08 /* Private */,
      19,    0,  206,    2, 0x08 /* Private */,
      20,    0,  207,    2, 0x08 /* Private */,
      21,    0,  208,    2, 0x08 /* Private */,
      22,    0,  209,    2, 0x08 /* Private */,
      23,    0,  210,    2, 0x08 /* Private */,
      24,    0,  211,    2, 0x08 /* Private */,
      25,    0,  212,    2, 0x08 /* Private */,
      26,    0,  213,    2, 0x08 /* Private */,
      27,    0,  214,    2, 0x08 /* Private */,
      28,    0,  215,    2, 0x08 /* Private */,
      29,    0,  216,    2, 0x08 /* Private */,
      30,    0,  217,    2, 0x08 /* Private */,
      31,    0,  218,    2, 0x08 /* Private */,
      32,    0,  219,    2, 0x08 /* Private */,
      33,    0,  220,    2, 0x08 /* Private */,
      34,    0,  221,    2, 0x08 /* Private */,
      35,    0,  222,    2, 0x08 /* Private */,
      36,    0,  223,    2, 0x08 /* Private */,

 // slots: parameters
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,

       0        // eod
};

void ArxDoubleTest::qt_static_metacall(QObject *_o, QMetaObject::Call _c, int _id, void **_a)
{
    if (_c == QMetaObject::InvokeMetaMethod) {
        auto *_t = static_cast<ArxDoubleTest *>(_o);
        Q_UNUSED(_t)
        switch (_id) {
        case 0: _t->voidConstructorCase1(); break;
        case 1: _t->voidConstructorCase2(); break;
        case 2: _t->voidConstructorCase3(); break;
        case 3: _t->voidConstructorCase4(); break;
        case 4: _t->voidConstructorCase5(); break;
        case 5: _t->voidConstructorCase6(); break;
        case 6: _t->copyConstructor(); break;
        case 7: _t->copyConstructorOtherType(); break;
        case 8: _t->copyAssignment(); break;
        case 9: _t->copyAssignmentOtherType(); break;
        case 10: _t->stringConversionCase2(); break;
        case 11: _t->stringConversionCase3(); break;
        case 12: _t->stringConversionCase4(); break;
        case 13: _t->stringConversionCase5(); break;
        case 14: _t->stringConversionCase12(); break;
        case 15: _t->stringConversionCase13(); break;
        case 16: _t->stringConversionCase14(); break;
        case 17: _t->stringConversionCase15(); break;
        case 18: _t->getNumberOfInputDelays(); break;
        case 19: _t->getNumberOfInputs(); break;
        case 20: _t->getNumberOfOutputDelays(); break;
        case 21: _t->getNumberOfOutputs(); break;
        case 22: _t->getNumberOfVariables(); break;
        case 23: _t->getMaxnInOut(); break;
        case 24: _t->getNSample(); break;
        case 25: _t->getSampleTime(); break;
        case 26: _t->getTimeSimulation(); break;
        case 27: _t->getTransportDelay(); break;
        case 28: _t->getInputMatrix(); break;
        case 29: _t->getOutputMatrix(); break;
        case 30: _t->getModelCoef(); break;
        case 31: _t->getLinearVectorA(); break;
        case 32: _t->getLinearEqualityVectorB(); break;
        case 33: _t->setLinearVector(); break;
        case 34: _t->simInMatrix(); break;
        default: ;
        }
    }
    Q_UNUSED(_a);
}

QT_INIT_METAOBJECT const QMetaObject ArxDoubleTest::staticMetaObject = { {
    &QObject::staticMetaObject,
    qt_meta_stringdata_ArxDoubleTest.data,
    qt_meta_data_ArxDoubleTest,
    qt_static_metacall,
    nullptr,
    nullptr
} };


const QMetaObject *ArxDoubleTest::metaObject() const
{
    return QObject::d_ptr->metaObject ? QObject::d_ptr->dynamicMetaObject() : &staticMetaObject;
}

void *ArxDoubleTest::qt_metacast(const char *_clname)
{
    if (!_clname) return nullptr;
    if (!strcmp(_clname, qt_meta_stringdata_ArxDoubleTest.stringdata0))
        return static_cast<void*>(this);
    return QObject::qt_metacast(_clname);
}

int ArxDoubleTest::qt_metacall(QMetaObject::Call _c, int _id, void **_a)
{
    _id = QObject::qt_metacall(_c, _id, _a);
    if (_id < 0)
        return _id;
    if (_c == QMetaObject::InvokeMetaMethod) {
        if (_id < 35)
            qt_static_metacall(this, _c, _id, _a);
        _id -= 35;
    } else if (_c == QMetaObject::RegisterMethodArgumentMetaType) {
        if (_id < 35)
            *reinterpret_cast<int*>(_a[0]) = -1;
        _id -= 35;
    }
    return _id;
}
QT_WARNING_POP
QT_END_MOC_NAMESPACE
